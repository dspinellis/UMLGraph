#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 281411 (http://www.spinellis.gr/umlgraph/)
#

digraph G {
graph [fontnames="svg"]
edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10,color="black"];
node [fontname="Helvetica",fontcolor="black",fontsize=10,shape=plaintext,margin=0,width=0,height=0];
nodesep=0.25;
ranksep=0.5;
// MyVector<E, P>
c42 [label=<<table title="MyVector" border="0" cellborder="1" cellspacing="0" cellpadding="2"><tr><td><table border="0" cellspacing="0" cellpadding="1"><tr><td align="center" balign="center"> MyVector&lt;E, P&gt; </td></tr></table></td></tr><tr><td><table border="0" cellspacing="0" cellpadding="1"><tr><td align="left" balign="left">  </td></tr></table></td></tr><tr><td><table border="0" cellspacing="0" cellpadding="1"><tr><td align="left" balign="left"> ~ addAll(index : int, c : Collection&lt;E&gt;) : boolean </td></tr><tr><td align="left" balign="left"> ~ foo(x : MyVector&lt;P, MyVector&lt;E, E&gt;&gt;) : MyVector&lt;E, P&gt; </td></tr><tr><td align="left" balign="left"> ~ removeAll(c : Collection&lt;?&gt;) : boolean </td></tr><tr><td align="left" balign="left"> ~ set(index : int, element : E) : E </td></tr></table></td></tr></table>>];
// MyVector<E, P> extends java.util.Vector<E>
c43 -> c42 [arrowtail=empty,dir=back,weight=10];
// MyVector<E, P> implements java.util.List<E>
c44 -> c42 [arrowtail=empty,style=dashed,dir=back,weight=9];
// MyVector<E, P> implements java.util.RandomAccess
c45 -> c42 [arrowtail=empty,style=dashed,dir=back,weight=9];
// MyVector<E, P> implements java.lang.Cloneable
c46 -> c42 [arrowtail=empty,style=dashed,dir=back,weight=9];
// java.util.RandomAccess
c45 [label=<<table title="java.util.RandomAccess" border="0" cellborder="1" cellspacing="0" cellpadding="2" href="http://docs.oracle.com/javase/7/docs/api/java/util/RandomAccess.html" target="_parent"><tr><td><table border="0" cellspacing="0" cellpadding="1"><tr><td align="center" balign="center"> &#171;interface&#187; </td></tr><tr><td align="center" balign="center"> RandomAccess </td></tr></table></td></tr></table>>, URL="http://docs.oracle.com/javase/7/docs/api/java/util/RandomAccess.html"];
// java.util.List<E>
c44 [label=<<table title="java.util.List" border="0" cellborder="1" cellspacing="0" cellpadding="2" href="http://docs.oracle.com/javase/7/docs/api/java/util/List.html" target="_parent"><tr><td><table border="0" cellspacing="0" cellpadding="1"><tr><td align="center" balign="center"> &#171;interface&#187; </td></tr><tr><td align="center" balign="center"> List&lt;E&gt; </td></tr></table></td></tr><tr><td><table border="0" cellspacing="0" cellpadding="1"><tr><td align="left" balign="left">  </td></tr></table></td></tr><tr><td><table border="0" cellspacing="0" cellpadding="1"><tr><td align="left" balign="left"> <i>+ size() : int</i> </td></tr><tr><td align="left" balign="left"> <i>+ isEmpty() : boolean</i> </td></tr><tr><td align="left" balign="left"> <i>+ contains(arg0 : Object) : boolean</i> </td></tr><tr><td align="left" balign="left"> <i>+ iterator() : Iterator&lt;E&gt;</i> </td></tr><tr><td align="left" balign="left"> <i>+ toArray() : Object[]</i> </td></tr><tr><td align="left" balign="left"> <i>+ toArray(arg0 : T[]) : T[]</i> </td></tr><tr><td align="left" balign="left"> <i>+ add(arg0 : E) : boolean</i> </td></tr><tr><td align="left" balign="left"> <i>+ remove(arg0 : Object) : boolean</i> </td></tr><tr><td align="left" balign="left"> <i>+ containsAll(arg0 : Collection&lt;?&gt;) : boolean</i> </td></tr><tr><td align="left" balign="left"> <i>+ addAll(arg0 : Collection&lt;?&gt;) : boolean</i> </td></tr><tr><td align="left" balign="left"> <i>+ addAll(arg0 : int, arg1 : Collection&lt;?&gt;) : boolean</i> </td></tr><tr><td align="left" balign="left"> <i>+ removeAll(arg0 : Collection&lt;?&gt;) : boolean</i> </td></tr><tr><td align="left" balign="left"> <i>+ retainAll(arg0 : Collection&lt;?&gt;) : boolean</i> </td></tr><tr><td align="left" balign="left"> + replaceAll(arg0 : UnaryOperator&lt;E&gt;) </td></tr><tr><td align="left" balign="left"> + sort(arg0 : Comparator&lt;?&gt;) </td></tr><tr><td align="left" balign="left"> <i>+ clear()</i> </td></tr><tr><td align="left" balign="left"> <i>+ equals(arg0 : Object) : boolean</i> </td></tr><tr><td align="left" balign="left"> <i>+ hashCode() : int</i> </td></tr><tr><td align="left" balign="left"> <i>+ get(arg0 : int) : E</i> </td></tr><tr><td align="left" balign="left"> <i>+ set(arg0 : int, arg1 : E) : E</i> </td></tr><tr><td align="left" balign="left"> <i>+ add(arg0 : int, arg1 : E)</i> </td></tr><tr><td align="left" balign="left"> <i>+ remove(arg0 : int) : E</i> </td></tr><tr><td align="left" balign="left"> <i>+ indexOf(arg0 : Object) : int</i> </td></tr><tr><td align="left" balign="left"> <i>+ lastIndexOf(arg0 : Object) : int</i> </td></tr><tr><td align="left" balign="left"> <i>+ listIterator() : ListIterator&lt;E&gt;</i> </td></tr><tr><td align="left" balign="left"> <i>+ listIterator(arg0 : int) : ListIterator&lt;E&gt;</i> </td></tr><tr><td align="left" balign="left"> <i>+ subList(arg0 : int, arg1 : int) : List&lt;E&gt;</i> </td></tr><tr><td align="left" balign="left"> + spliterator() : Spliterator&lt;E&gt; </td></tr></table></td></tr></table>>, URL="http://docs.oracle.com/javase/7/docs/api/java/util/List.html"];
// java.lang.Cloneable
c46 [label=<<table title="java.lang.Cloneable" border="0" cellborder="1" cellspacing="0" cellpadding="2" href="http://docs.oracle.com/javase/7/docs/api/java/lang/Cloneable.html" target="_parent"><tr><td><table border="0" cellspacing="0" cellpadding="1"><tr><td align="center" balign="center"> &#171;interface&#187; </td></tr><tr><td align="center" balign="center"> Cloneable </td></tr></table></td></tr></table>>, URL="http://docs.oracle.com/javase/7/docs/api/java/lang/Cloneable.html"];
// java.util.Vector<E>
c43 [label=<<table title="java.util.Vector" border="0" cellborder="1" cellspacing="0" cellpadding="2" href="http://docs.oracle.com/javase/7/docs/api/java/util/Vector.html" target="_parent"><tr><td><table border="0" cellspacing="0" cellpadding="1"><tr><td align="center" balign="center"> Vector&lt;E&gt; </td></tr></table></td></tr><tr><td><table border="0" cellspacing="0" cellpadding="1"><tr><td align="left" balign="left"> # elementData : Object[] </td></tr><tr><td align="left" balign="left"> # elementCount : int </td></tr><tr><td align="left" balign="left"> # capacityIncrement : int </td></tr><tr><td align="left" balign="left"> - serialVersionUID : long </td></tr><tr><td align="left" balign="left"> - MAX_ARRAY_SIZE : int </td></tr></table></td></tr><tr><td><table border="0" cellspacing="0" cellpadding="1"><tr><td align="left" balign="left"> + copyInto(arg0 : Object[]) </td></tr><tr><td align="left" balign="left"> + trimToSize() </td></tr><tr><td align="left" balign="left"> + ensureCapacity(arg0 : int) </td></tr><tr><td align="left" balign="left"> - ensureCapacityHelper(arg0 : int) </td></tr><tr><td align="left" balign="left"> - grow(arg0 : int) </td></tr><tr><td align="left" balign="left"> - hugeCapacity(arg0 : int) : int </td></tr><tr><td align="left" balign="left"> + setSize(arg0 : int) </td></tr><tr><td align="left" balign="left"> + capacity() : int </td></tr><tr><td align="left" balign="left"> + size() : int </td></tr><tr><td align="left" balign="left"> + isEmpty() : boolean </td></tr><tr><td align="left" balign="left"> + elements() : Enumeration&lt;E&gt; </td></tr><tr><td align="left" balign="left"> + contains(arg0 : Object) : boolean </td></tr><tr><td align="left" balign="left"> + indexOf(arg0 : Object) : int </td></tr><tr><td align="left" balign="left"> + indexOf(arg0 : Object, arg1 : int) : int </td></tr><tr><td align="left" balign="left"> + lastIndexOf(arg0 : Object) : int </td></tr><tr><td align="left" balign="left"> + lastIndexOf(arg0 : Object, arg1 : int) : int </td></tr><tr><td align="left" balign="left"> + elementAt(arg0 : int) : E </td></tr><tr><td align="left" balign="left"> + firstElement() : E </td></tr><tr><td align="left" balign="left"> + lastElement() : E </td></tr><tr><td align="left" balign="left"> + setElementAt(arg0 : E, arg1 : int) </td></tr><tr><td align="left" balign="left"> + removeElementAt(arg0 : int) </td></tr><tr><td align="left" balign="left"> + insertElementAt(arg0 : E, arg1 : int) </td></tr><tr><td align="left" balign="left"> + addElement(arg0 : E) </td></tr><tr><td align="left" balign="left"> + removeElement(arg0 : Object) : boolean </td></tr><tr><td align="left" balign="left"> + removeAllElements() </td></tr><tr><td align="left" balign="left"> + clone() : Object </td></tr><tr><td align="left" balign="left"> + toArray() : Object[] </td></tr><tr><td align="left" balign="left"> + toArray(arg0 : T[]) : T[] </td></tr><tr><td align="left" balign="left"> ~ elementData(arg0 : int) : E </td></tr><tr><td align="left" balign="left"> + get(arg0 : int) : E </td></tr><tr><td align="left" balign="left"> + set(arg0 : int, arg1 : E) : E </td></tr><tr><td align="left" balign="left"> + add(arg0 : E) : boolean </td></tr><tr><td align="left" balign="left"> + remove(arg0 : Object) : boolean </td></tr><tr><td align="left" balign="left"> + add(arg0 : int, arg1 : E) </td></tr><tr><td align="left" balign="left"> + remove(arg0 : int) : E </td></tr><tr><td align="left" balign="left"> + clear() </td></tr><tr><td align="left" balign="left"> + containsAll(arg0 : Collection&lt;?&gt;) : boolean </td></tr><tr><td align="left" balign="left"> + addAll(arg0 : Collection&lt;?&gt;) : boolean </td></tr><tr><td align="left" balign="left"> + removeAll(arg0 : Collection&lt;?&gt;) : boolean </td></tr><tr><td align="left" balign="left"> + retainAll(arg0 : Collection&lt;?&gt;) : boolean </td></tr><tr><td align="left" balign="left"> + addAll(arg0 : int, arg1 : Collection&lt;?&gt;) : boolean </td></tr><tr><td align="left" balign="left"> + equals(arg0 : Object) : boolean </td></tr><tr><td align="left" balign="left"> + hashCode() : int </td></tr><tr><td align="left" balign="left"> + toString() : String </td></tr><tr><td align="left" balign="left"> + subList(arg0 : int, arg1 : int) : List&lt;E&gt; </td></tr><tr><td align="left" balign="left"> # removeRange(arg0 : int, arg1 : int) </td></tr><tr><td align="left" balign="left"> - readObject(arg0 : ObjectInputStream) </td></tr><tr><td align="left" balign="left"> - writeObject(arg0 : ObjectOutputStream) </td></tr><tr><td align="left" balign="left"> + listIterator(arg0 : int) : ListIterator&lt;E&gt; </td></tr><tr><td align="left" balign="left"> + listIterator() : ListIterator&lt;E&gt; </td></tr><tr><td align="left" balign="left"> + iterator() : Iterator&lt;E&gt; </td></tr><tr><td align="left" balign="left"> + forEach(arg0 : Consumer&lt;?&gt;) </td></tr><tr><td align="left" balign="left"> + removeIf(arg0 : Predicate&lt;?&gt;) : boolean </td></tr><tr><td align="left" balign="left"> + replaceAll(arg0 : UnaryOperator&lt;E&gt;) </td></tr><tr><td align="left" balign="left"> + sort(arg0 : Comparator&lt;?&gt;) </td></tr><tr><td align="left" balign="left"> + spliterator() : Spliterator&lt;E&gt; </td></tr></table></td></tr></table>>, URL="http://docs.oracle.com/javase/7/docs/api/java/util/Vector.html"];
}

